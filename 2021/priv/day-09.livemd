<!-- vim: syntax=markdown -->

# Advant of Code 2021 day 09

## Setup

```elixir
Mix.install([
  {:kino, "~> 0.4.1"}
])
```

```elixir
input = Kino.Input.textarea("Please paste your input:")
```

```elixir
grid =
  input
  |> Kino.Input.read()
  |> String.split("\n", trim: true)
  |> Enum.with_index()
  |> Enum.flat_map(fn {row, i} ->
    row
    |> String.split("", trim: true)
    |> Enum.with_index()
    |> Enum.map(fn {v, j} -> {{i, j}, String.to_integer(v)} end)
  end)
  |> Enum.into(%{})
```

## Part 1

```elixir
neighbor_keys = fn {i, j} -> [{i, j - 1}, {i, j + 1}, {i - 1, j}, {i + 1, j}] end

low_point? = fn {key, value}, map ->
  key
  |> then(&neighbor_keys.(&1))
  |> Enum.map(&Map.get(map, &1))
  # |> Enum.reject(&is_nil/1) # we don't need to filter
  |> Enum.all?(fn v -> value < v end)
end

grid
|> Enum.filter(&low_point?.(&1, grid))
|> Enum.map(&(elem(&1, 1) + 1))
|> Enum.sum()
```

## Part 2

```elixir
defmodule Recur do
  def basin(cord, set, grid) do
    if cord in set || grid[cord] in [nil, 9] do
      set
    else
      set = MapSet.put(set, cord)

      cord
      |> neighbor_keys()
      |> Enum.reduce(set, &basin(&1, &2, grid))
    end
  end

  def neighbor_keys({i, j}) do
    [{i, j - 1}, {i, j + 1}, {i - 1, j}, {i + 1, j}]
  end
end

low_points =
  grid
  |> Enum.filter(&low_point?.(&1, grid))
  |> Enum.map(&elem(&1, 0))
  |> Enum.map(&Recur.basin(&1, MapSet.new(), grid))
  |> Enum.map(&MapSet.size/1)
  |> Enum.sort(:desc)
  |> Enum.take(3)
  |> Enum.product()
```
